import tkinter as tk
from tkinter import messagebox

# Function to evaluate the expression
def evaluate_expression(expression):
    try:
        result = eval(expression)
        entry_var.set(result)
    except Exception as e:
        messagebox.showerror("Error", f"Invalid Expression: {e}")

# Function to update the expression in the entry widget
def update_expression(symbol):
    current_text = entry_var.get()
    entry_var.set(current_text + symbol)

# Function to clear the expression
def clear_expression():
    entry_var.set("")

# Function to delete the last character
def delete_last_character():
    current_text = entry_var.get()
    entry_var.set(current_text[:-1])

# Setting up the main window
root = tk.Tk()
root.title("Professional Calculator")
root.geometry("400x500")
root.config(bg="#282c34")

# Defining entry widget for showing the current expression/result
entry_var = tk.StringVar()
entry = tk.Entry(root, textvariable=entry_var, font=("Arial", 20), bd=10, relief="sunken", width=15, justify="right")
entry.grid(row=0, column=0, columnspan=4)

# Button Layout for the calculator
buttons = [
    ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("/", 1, 3),
    ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("*", 2, 3),
    ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("-", 3, 3),
    ("0", 4, 0), (".", 4, 1), ("=", 4, 2), ("+", 4, 3),
    ("C", 5, 0), ("DEL", 5, 1)
]

# Creating buttons
for (text, row, col) in buttons:
    if text == "=":
        button = tk.Button(root, text=text, font=("Arial", 20), bg="#4CAF50", fg="white", command=lambda: evaluate_expression(entry_var.get()))
    elif text == "C":
        button = tk.Button(root, text=text, font=("Arial", 20), bg="#f44336", fg="white", command=clear_expression)
    elif text == "DEL":
        button = tk.Button(root, text=text, font=("Arial", 20), bg="#f44336", fg="white", command=delete_last_character)
    else:
        button = tk.Button(root, text=text, font=("Arial", 20), command=lambda symbol=text: update_expression(symbol))
    button.grid(row=row, column=col, sticky="nsew", ipadx=10, ipady=10)

# Make the buttons expand proportionally
for i in range(6):
    root.grid_rowconfigure(i, weight=1)
    root.grid_columnconfigure(i, weight=1)

# Running the application
root.mainloop()
